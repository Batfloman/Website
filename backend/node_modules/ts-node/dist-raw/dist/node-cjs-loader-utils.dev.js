"use strict";

// Copied from several files in node's source code.
// https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js
// Each function and variable below must have a comment linking to the source in node's github repo.
var path = require('path');

var packageJsonReader = require('./node-package-json-reader');

var _require = require('./node-primordials'),
    JSONParse = _require.JSONParse;

var _require2 = require('../dist/util'),
    normalizeSlashes = _require2.normalizeSlashes;

module.exports.assertScriptCanLoadAsCJSImpl = assertScriptCanLoadAsCJSImpl;
/**
 * copied from Module._extensions['.js']
 * https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L1113-L1120
 * @param {import('../src/index').Service} service
 * @param {NodeJS.Module} module
 * @param {string} filename
 */

function assertScriptCanLoadAsCJSImpl(service, module, filename) {
  var pkg = readPackageScope(filename); // ts-node modification: allow our configuration to override

  var tsNodeClassification = service.moduleTypeClassifier.classifyModule(normalizeSlashes(filename));
  if (tsNodeClassification.moduleType === 'cjs') return; // Function require shouldn't be used in ES modules.

  if (tsNodeClassification.moduleType === 'esm' || pkg && pkg.data && pkg.data.type === 'module') {
    var parentPath = module.parent && module.parent.filename;
    var packageJsonPath = pkg ? path.resolve(pkg.path, 'package.json') : null;
    throw createErrRequireEsm(filename, parentPath, packageJsonPath);
  }
} // Copied from https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js#L285-L301


function readPackageScope(checkPath) {
  var rootSeparatorIndex = checkPath.indexOf(path.sep);
  var separatorIndex;

  while ((separatorIndex = checkPath.lastIndexOf(path.sep)) > rootSeparatorIndex) {
    checkPath = checkPath.slice(0, separatorIndex);
    if (checkPath.endsWith(path.sep + 'node_modules')) return false;
    var pjson = readPackage(checkPath);
    if (pjson) return {
      path: checkPath,
      data: pjson
    };
  }

  return false;
} // Copied from https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js#L249


var packageJsonCache = new Map(); // Copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L275-L304

function readPackage(requestPath) {
  var jsonPath = path.resolve(requestPath, 'package.json');
  var existing = packageJsonCache.get(jsonPath);
  if (existing !== undefined) return existing;
  var result = packageJsonReader.read(jsonPath);
  var json = result.containsKeys === false ? '{}' : result.string;

  if (json === undefined) {
    packageJsonCache.set(jsonPath, false);
    return false;
  }

  try {
    var parsed = JSONParse(json);
    var filtered = {
      name: parsed.name,
      main: parsed.main,
      exports: parsed.exports,
      imports: parsed.imports,
      type: parsed.type
    };
    packageJsonCache.set(jsonPath, filtered);
    return filtered;
  } catch (e) {
    e.path = jsonPath;
    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;
    throw e;
  }
} // Native ERR_REQUIRE_ESM Error is declared here:
//   https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L1294-L1313
// Error class factory is implemented here:
//   function E: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L323-L341
//   function makeNodeErrorWithCode: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L251-L278
// The code below should create an error that matches the native error as closely as possible.
// Third-party libraries which attempt to catch the native ERR_REQUIRE_ESM should recognize our imitation error.


function createErrRequireEsm(filename, parentPath, packageJsonPath) {
  var code = 'ERR_REQUIRE_ESM';
  var err = new Error(getMessage(filename, parentPath, packageJsonPath)); // Set `name` to be used in stack trace, generate stack trace with that name baked in, then re-declare the `name` field.
  // This trick is copied from node's source.

  err.name = "Error [".concat(code, "]");
  err.stack;
  Object.defineProperty(err, 'name', {
    value: 'Error',
    enumerable: false,
    writable: true,
    configurable: true
  });
  err.code = code;
  return err; // Copy-pasted from https://github.com/nodejs/node/blob/b533fb3508009e5f567cc776daba8fbf665386a6/lib/internal/errors.js#L1293-L1311
  // so that our error message is identical to the native message.

  function getMessage(filename) {
    var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var packageJsonPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var ext = path.extname(filename);
    var msg = "Must use import to load ES Module: ".concat(filename);

    if (parentPath && packageJsonPath) {
      var _path = require('path');

      var basename = _path.basename(filename) === _path.basename(parentPath) ? filename : _path.basename(filename);
      msg += '\nrequire() of ES modules is not supported.\nrequire() of ' + "".concat(filename, " ").concat(parentPath ? "from ".concat(parentPath, " ") : '') + "is an ES module file as it is a ".concat(ext, " file whose nearest parent ") + "package.json contains \"type\": \"module\" which defines all ".concat(ext, " ") + 'files in that package scope as ES modules.\nInstead ' + 'change the requiring code to use ' + 'import(), or remove "type": "module" from ' + "".concat(packageJsonPath, ".\n");
      return msg;
    }

    return msg;
  }
}