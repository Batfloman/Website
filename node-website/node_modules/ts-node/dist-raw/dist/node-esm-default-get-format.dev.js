// Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js
// Then modified to suite our needs.
// Formatting is intentionally bad to keep the diff as small as possible, to make it easier to merge
// upstream changes and understand our modifications.
'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('./node-primordials'),
    RegExpPrototypeExec = _require.RegExpPrototypeExec,
    StringPrototypeStartsWith = _require.StringPrototypeStartsWith;

var _require2 = require('path'),
    extname = _require2.extname;

var _require3 = require('./node-options'),
    getOptionValue = _require3.getOptionValue;

var _process$versions$nod = process.versions.node.split('.').map(function (s) {
  return parseInt(s, 10);
}),
    _process$versions$nod2 = _slicedToArray(_process$versions$nod, 2),
    nodeMajor = _process$versions$nod2[0],
    nodeMinor = _process$versions$nod2[1];

var experimentalJsonModules = nodeMajor > 17 || nodeMajor === 17 && nodeMinor >= 5 || getOptionValue('--experimental-json-modules');
var experimentalSpeciferResolution = getOptionValue('--experimental-specifier-resolution');
var experimentalWasmModules = getOptionValue('--experimental-wasm-modules');

var _require$createResolv = require('./node-esm-resolve-implementation.js').createResolve({
  tsExtensions: [],
  jsExtensions: []
}),
    getPackageType = _require$createResolv.getPackageType;

var _require4 = require('url'),
    URL = _require4.URL,
    fileURLToPath = _require4.fileURLToPath;

var ERR_UNKNOWN_FILE_EXTENSION = require('./node-errors').codes.ERR_UNKNOWN_FILE_EXTENSION;

var extensionFormatMap = {
  '__proto__': null,
  '.cjs': 'commonjs',
  '.js': 'module',
  '.mjs': 'module'
};
var legacyExtensionFormatMap = {
  '__proto__': null,
  '.cjs': 'commonjs',
  '.js': 'commonjs',
  '.json': 'commonjs',
  '.mjs': 'module',
  '.node': 'commonjs'
};
if (experimentalWasmModules) extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';
if (experimentalJsonModules) extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';

function defaultGetFormat(url, context, defaultGetFormatUnused) {
  if (StringPrototypeStartsWith(url, 'node:')) {
    return {
      format: 'builtin'
    };
  }

  var parsed = new URL(url);

  if (parsed.protocol === 'data:') {
    var _ref = RegExpPrototypeExec(/^([^/]+\/[^;,]+)(?:[^,]*?)(;base64)?,/, parsed.pathname) || [null, null, null],
        _ref2 = _slicedToArray(_ref, 2),
        mime = _ref2[1];

    var format = {
      '__proto__': null,
      'text/javascript': 'module',
      'application/json': experimentalJsonModules ? 'json' : null,
      'application/wasm': experimentalWasmModules ? 'wasm' : null
    }[mime] || null;
    return {
      format: format
    };
  } else if (parsed.protocol === 'file:') {
    var ext = extname(parsed.pathname);

    var _format;

    if (ext === '.js') {
      _format = getPackageType(parsed.href) === 'module' ? 'module' : 'commonjs';
    } else {
      _format = extensionFormatMap[ext];
    }

    if (!_format) {
      if (experimentalSpeciferResolution === 'node') {
        process.emitWarning('The Node.js specifier resolution in ESM is experimental.', 'ExperimentalWarning');
        _format = legacyExtensionFormatMap[ext];
      } else {
        throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url));
      }
    }

    return {
      format: _format || null
    };
  }

  return {
    format: null
  };
}

exports.defaultGetFormat = defaultGetFormat;